---
import "../styles/global.css";

export type ArticleMeta = {
  readonly description?: string;
  readonly publishedTime?: string;
  readonly modifiedTime?: string;
  readonly tags?: readonly string[];
  readonly section?: string;
};

interface Props {
  readonly title: string;
  readonly description?: string;
  readonly image?: string;
  readonly ogType?: "website" | "article";
  readonly articleMeta?: ArticleMeta;
  readonly alternates?: readonly { locale: string; url: string }[];
}

const props = Astro.props as Props;
const { title, description, image, articleMeta } = props;
const ogType = props.ogType ?? "website";
const metaDescription = description ?? articleMeta?.description;
const canonicalURL = Astro.site ? new URL(Astro.url.pathname, Astro.site) : undefined;
const alternates = props.alternates ?? [];

function resolveAbsoluteUrl(path: string): string | null {
  if (!Astro.site) {
    return path;
  }
  try {
    return new URL(path, Astro.site).toString();
  } catch {
    return path;
  }
}
---

<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<link rel="icon" href="/favicon.ico" />
{canonicalURL && <link rel="canonical" href={canonicalURL} />}
<title>{title}</title>
{metaDescription && <meta name="description" content={metaDescription} />}
<meta property="og:title" content={title} />
{metaDescription && <meta property="og:description" content={metaDescription} />}
{canonicalURL && <meta property="og:url" content={canonicalURL} />}
<meta property="og:type" content={ogType} />
{ogType === "article" && articleMeta?.publishedTime && (
  <meta property="article:published_time" content={articleMeta.publishedTime} />
)}
{ogType === "article" && articleMeta?.modifiedTime && (
  <meta property="article:modified_time" content={articleMeta.modifiedTime} />
)}
{ogType === "article" && articleMeta?.section && (
  <meta property="article:section" content={articleMeta.section} />
)}
{ogType === "article" &&
  articleMeta?.tags?.map((tag) => (
    <meta property="article:tag" content={tag} />
  ))}
{image && <meta property="og:image" content={image} />}
<meta name="twitter:card" content={image ? 'summary_large_image' : 'summary'} />
<meta name="twitter:title" content={title} />
{metaDescription && <meta name="twitter:description" content={metaDescription} />}
{image && <meta name="twitter:image" content={image} />}
{alternates.map((link) => {
  const absolute = resolveAbsoluteUrl(link.url);
  return absolute ? (
    <link rel="alternate" hreflang={link.locale} href={absolute} />
  ) : null;
})}
{canonicalURL && <link rel="alternate" hreflang="x-default" href={canonicalURL.toString()} />}
